#!/usr/bin/env ts-node

import { readdirSync, writeFileSync } from 'fs';
import { join } from 'path';

export type BrandAsset = {
  path: string;
  width: number;
  height: number;
  kind: "favicon" | "icon" | "og" | "social" | "hero";
};

export const BRAND_ASSETS: Record<string, BrandAsset> = {};

function classifyAsset(width: number, height: number): BrandAsset['kind'] {
  if (width <= 64 && height <= 64) return 'favicon';
  if (width === 1200 && height === 630) return 'og';
  if (width === 1080 && height === 1080) return 'social';
  if (width === 1920 && height === 1080) return 'hero';
  if (width <= 1024 && height <= 1024 && width === height) return 'icon';
  return 'icon'; // fallback
}

function parseAssetFilename(filename: string): { width: number; height: number } | null {
  const match = filename.match(/^modern_ledger_(\d+)x(\d+)\.png$/);
  if (!match) return null;

  const width = parseInt(match[1], 10);
  const height = parseInt(match[2], 10);

  return { width, height };
}

function generateAssetIndex() {
  const publicDir = join(process.cwd(), 'public');
  const files = readdirSync(publicDir);

  const assets: Record<string, BrandAsset> = {};

  for (const file of files) {
    const dimensions = parseAssetFilename(file);
    if (!dimensions) continue;

    const { width, height } = dimensions;
    const kind = classifyAsset(width, height);

    assets[file] = {
      path: `/${file}`,
      width,
      height,
      kind
    };
  }

  return assets;
}

function generateTypeScriptModule(assets: Record<string, BrandAsset>): string {
  const assetEntries = Object.entries(assets)
    .map(([key, asset]) => `  "${key}": ${JSON.stringify(asset)}`)
    .join(',\n');

  return `// Auto-generated by scripts/asset-index.ts - DO NOT EDIT MANUALLY
export type BrandAsset = {
  path: string;
  width: number;
  height: number;
  kind: "favicon" | "icon" | "og" | "social" | "hero";
};

export const BRAND_ASSETS: Record<string, BrandAsset> = {
${assetEntries}
};
`;
}

async function main() {
  console.log('ðŸŽ¨ Indexing brand assets...');

  const assets = generateAssetIndex();
  const tsModule = generateTypeScriptModule(assets);

  const outputPath = join(process.cwd(), 'src', 'data', 'brand-assets.generated.ts');
  writeFileSync(outputPath, tsModule);

  console.log(`âœ… Generated asset index with ${Object.keys(assets).length} assets:`);
  Object.entries(assets).forEach(([filename, asset]) => {
    console.log(`   ${filename} â†’ ${asset.kind} (${asset.width}x${asset.height})`);
  });
  console.log(`ðŸ“„ Output: ${outputPath}`);
}

// CLI execution
main().catch(console.error);