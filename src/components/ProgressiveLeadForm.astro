---
interface Props {
  eyebrow?: string;
  heading?: string;
  subheading?: string;
  variant?: 'default' | 'compact' | 'popup';
  source?: string;
  class?: string;
}

const {
  eyebrow = 'Free Consultation',
  heading = 'Get Your Bookkeeping Assessment',
  subheading = "Tell us about your business and we'll show you exactly how much time and money you can save.",
  variant = 'default',
  source = 'progressive_form',
  class: className = ''
} = Astro.props;

const formId = `progressive-form-${Math.random().toString(36).slice(2, 11)}`;

const urgencyMessages = [
  "üî• Limited slots available this month",
  "‚è∞ Most clients save $2,000+ in their first 90 days",
  "üéØ Join 150+ Texas businesses already saving time"
];

const socialProofItems = [
  { metric: "98%", label: "Client retention rate" },
  { metric: "24hrs", label: "Response time" },
  { metric: "$3,200", label: "Average annual savings" }
];
---

<div class={`surface rounded-3xl border border-neutral-100 bg-white shadow-soft ${className}`.trim()}>
  <!-- Social Proof Bar -->
  <div class="border-b border-neutral-100 px-6 py-4">
    <div class="flex items-center justify-between text-xs">
      <div class="flex items-center gap-4">
        {socialProofItems.map((item) => (
          <div class="flex items-center gap-1">
            <span class="font-semibold text-brand-navy">{item.metric}</span>
            <span class="text-neutral-500">{item.label}</span>
          </div>
        ))}
      </div>
      <div class="flex items-center gap-1 text-brand-gold">
        <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
        </svg>
        <span class="font-medium">4.9/5 ‚Ä¢ 47 reviews</span>
      </div>
    </div>
  </div>

  <!-- Form Content -->
  <div class="p-8 space-y-6">
    <!-- Header -->
    <div class="text-center space-y-2">
      {eyebrow && <span class="eyebrow">{eyebrow}</span>}
      <h3 class="text-2xl font-semibold text-brand-navy md:text-3xl">{heading}</h3>
      <p class="text-sm text-neutral-600 md:text-base">{subheading}</p>
      
      <!-- Urgency Message (Rotating) -->
      <div class="mt-4 rounded-full bg-brand-sky/30 px-4 py-2">
        <p id={`urgency-${formId}`} class="text-sm font-medium text-brand-navy">
          {urgencyMessages[0]}
        </p>
      </div>
    </div>

    <!-- Progressive Form -->
    <form id={`form-${formId}`} class="space-y-6" data-progressive-form>
      <!-- Step 1: Basic Info (Always Visible) -->
      <div class="grid gap-4 md:grid-cols-2" data-step="1">
        <div>
          <label for={`${formId}-firstName`} class="form-label">First Name *</label>
          <input 
            type="text" 
            id={`${formId}-firstName`} 
            name="firstName" 
            class="form-field" 
            required 
            data-step="1"
          />
        </div>
        <div>
          <label for={`${formId}-email`} class="form-label">Work Email *</label>
          <input 
            type="email" 
            id={`${formId}-email`} 
            name="email" 
            class="form-field" 
            required 
            data-step="1"
          />
        </div>
      </div>

      <!-- Step 2: Business Context (Reveals after Step 1) -->
      <div class="hidden space-y-4" data-step="2">
        <div class="text-center">
          <div class="inline-flex items-center gap-2 rounded-full bg-brand-gold/10 px-3 py-1 text-sm font-medium text-brand-navy">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            Great! Just 2 more questions to personalize your assessment
          </div>
        </div>

        <div class="grid gap-4 md:grid-cols-2">
          <div>
            <label for={`${formId}-company`} class="form-label">Company Name</label>
            <input 
              type="text" 
              id={`${formId}-company`} 
              name="company" 
              class="form-field"
              data-step="2"
            />
          </div>
          <div>
            <label for={`${formId}-revenue`} class="form-label">Annual Revenue Range</label>
            <select id={`${formId}-revenue`} name="annualRevenue" class="form-field" data-step="2">
              <option value="">Select range...</option>
              <option value="under-250k">Under $250K</option>
              <option value="250k-750k">$250K - $750K</option>
              <option value="750k-1.5m">$750K - $1.5M</option>
              <option value="1.5m-plus">$1.5M+</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Step 3: Pain Point & Timeline (Reveals after Step 2) -->
      <div class="hidden space-y-4" data-step="3">
        <div class="text-center">
          <div class="inline-flex items-center gap-2 rounded-full bg-brand-gold/10 px-3 py-1 text-sm font-medium text-brand-navy">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Perfect! Last step to complete your assessment
          </div>
        </div>

        <div>
          <label for={`${formId}-challenge`} class="form-label">What's your biggest bookkeeping challenge? *</label>
          <textarea
            id={`${formId}-challenge`}
            name="challenge"
            class="form-field"
            rows="3"
            placeholder="e.g., 'Spending 8+ hours monthly on reconciliation' or 'Books aren't ready for tax season'"
            required
            data-step="3"
          ></textarea>
        </div>

        <div>
          <label for={`${formId}-timeline`} class="form-label">When would you like to get started?</label>
          <select id={`${formId}-timeline`} name="timeline" class="form-field" data-step="3">
            <option value="">Select timeline...</option>
            <option value="immediately">Immediately</option>
            <option value="30-days">Within 30 days</option>
            <option value="60-90-days">60-90 days</option>
            <option value="exploring">Just exploring options</option>
          </select>
        </div>
      </div>

      <!-- Hidden fields for tracking -->
      <input type="hidden" name="source" value={source} />
      <input type="hidden" name="formVariant" value={variant} />
      <input type="hidden" name="pageUrl" value="" />

      <!-- Submit Button with Dynamic Text -->
      <div class="space-y-3">
        <button 
          type="submit" 
          class="btn btn-primary w-full justify-center text-base" 
          data-submit-btn
        >
          <span data-step-text="1">Continue ‚Üí Get My Assessment</span>
          <span data-step-text="2" class="hidden">Continue ‚Üí Almost Done</span>
          <span data-step-text="3" class="hidden">üìä Get My Custom Assessment Report</span>
          <span data-loading class="hidden">Preparing your assessment...</span>
        </button>
        
        <p data-feedback class="hidden text-center text-sm" role="status" aria-live="polite"></p>
        
        <!-- Benefits Preview -->
        <div class="text-center">
          <p class="text-xs text-neutral-500">
            ‚úÖ <strong>Free 15-min consultation</strong> ‚Ä¢ ‚úÖ <strong>Custom savings estimate</strong> ‚Ä¢ ‚úÖ <strong>No obligations</strong>
          </p>
        </div>
      </div>
    </form>

    <!-- Progress Indicator -->
    <div class="mt-6">
      <div class="flex items-center justify-center gap-2">
        <div class="h-2 w-8 rounded-full bg-brand-gold transition-all duration-300" data-progress="1"></div>
        <div class="h-2 w-8 rounded-full bg-neutral-200 transition-all duration-300" data-progress="2"></div>
        <div class="h-2 w-8 rounded-full bg-neutral-200 transition-all duration-300" data-progress="3"></div>
      </div>
      <p class="mt-2 text-center text-xs text-neutral-500">
        <span data-progress-text>Step 1 of 3 ‚Ä¢ Takes less than 2 minutes</span>
      </p>
    </div>
  </div>
</div>

<script is:inline define:vars={{ formId, urgencyMessages }}>
  (() => {
    if (typeof window === 'undefined') return;

    const form = document.getElementById(`form-${formId}`);
    const submitBtn = document.querySelector(`#form-${formId} [data-submit-btn]`);
    const feedback = document.querySelector(`#form-${formId} [data-feedback]`);
    const urgencyEl = document.getElementById(`urgency-${formId}`);
    
    if (!(form instanceof HTMLFormElement)) return;

    let currentStep = 1;
    let urgencyIndex = 0;

    // Rotate urgency messages
    if (urgencyEl) {
      setInterval(() => {
        urgencyIndex = (urgencyIndex + 1) % urgencyMessages.length;
        urgencyEl.textContent = urgencyMessages[urgencyIndex];
      }, 5000);
    }

    const updateProgress = (step) => {
      // Update progress bars
      for (let i = 1; i <= 3; i++) {
        const bar = document.querySelector(`[data-progress="${i}"]`);
        if (bar) {
          bar.classList.toggle('bg-brand-gold', i <= step);
          bar.classList.toggle('bg-neutral-200', i > step);
        }
      }

      // Update step text
      const progressText = document.querySelector('[data-progress-text]');
      if (progressText) {
        const texts = [
          'Step 1 of 3 ‚Ä¢ Takes less than 2 minutes',
          'Step 2 of 3 ‚Ä¢ Almost there!',
          'Step 3 of 3 ‚Ä¢ Final step'
        ];
        progressText.textContent = texts[step - 1] || texts[0];
      }

      // Update button text
      document.querySelectorAll('[data-step-text]').forEach(el => {
        el.classList.add('hidden');
      });
      const activeText = document.querySelector(`[data-step-text="${step}"]`);
      if (activeText) {
        activeText.classList.remove('hidden');
      }
    };

    const showStep = (step) => {
      document.querySelectorAll(`[data-step]`).forEach(el => {
        if (el.dataset.step === step.toString()) {
          el.classList.remove('hidden');
        }
      });
      updateProgress(step);
    };

    const validateCurrentStep = () => {
      const stepFields = form.querySelectorAll(`[data-step="${currentStep}"]`);
      return Array.from(stepFields).every(field => {
        if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) {
          return field.required ? field.value.trim() !== '' : true;
        }
        return true;
      });
    };

    const setFeedback = (message, isError = false) => {
      if (!(feedback instanceof HTMLElement)) return;
      feedback.textContent = message;
      feedback.classList.remove('hidden', 'text-brand-navy', 'text-red-600');
      feedback.classList.add(isError ? 'text-red-600' : 'text-brand-navy');
    };

    const toggleLoading = (isLoading) => {
      if (submitBtn instanceof HTMLButtonElement) {
        submitBtn.disabled = isLoading;
      }
      document.querySelectorAll('[data-step-text]').forEach(el => {
        el.classList.add('hidden');
      });
      const loadingEl = document.querySelector('[data-loading]');
      if (loadingEl) {
        loadingEl.classList.toggle('hidden', !isLoading);
      }
      if (!isLoading) {
        updateProgress(currentStep);
      }
    };

    // Set page URL
    const pageUrlField = form.querySelector('[name="pageUrl"]');
    if (pageUrlField instanceof HTMLInputElement) {
      pageUrlField.value = window.location.href;
    }

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      if (currentStep < 3) {
        // Progressive step validation
        if (!validateCurrentStep()) {
          setFeedback('Please fill in the required fields.', true);
          return;
        }

        currentStep++;
        showStep(currentStep);
        setFeedback('');

        // Track progression
        if (typeof window.gtag === 'function') {
          window.gtag('event', 'form_progress', {
            event_category: 'engagement',
            event_label: `progressive_form_step_${currentStep}`,
            value: currentStep
          });
        }

        return;
      }

      // Final submission
      if (!validateCurrentStep()) {
        setFeedback('Please complete all required fields.', true);
        return;
      }

      toggleLoading(true);
      setFeedback('');

      const formData = new FormData(form);
      const payload = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/api/forms/progressive-lead', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json().catch(() => ({}));

        if (!response.ok) {
          throw new Error(result?.error || 'Unable to submit your assessment request.');
        }

        setFeedback('üéâ Assessment submitted! Check your email for next steps.');
        
        if (typeof window.gtag === 'function') {
          window.gtag('event', 'form_submit', {
            event_category: 'lead',
            event_label: 'progressive_form_complete'
          });
        }

        // Reset form after delay
        setTimeout(() => {
          form.reset();
          currentStep = 1;
          document.querySelectorAll('[data-step]').forEach(el => {
            if (el.dataset.step !== '1') {
              el.classList.add('hidden');
            }
          });
          updateProgress(1);
          setFeedback('');
        }, 3000);

      } catch (error) {
        console.error('Progressive form submission error:', error);
        setFeedback(
          error instanceof Error ? error.message : 'Something went wrong. Please try again.',
          true
        );
      } finally {
        toggleLoading(false);
      }
    });

    // Initialize
    updateProgress(1);
  })();
</script>