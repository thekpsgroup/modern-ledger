---
import { getEnv } from '../lib/env';

const navItems = [
  { href: '/', label: 'Home' },
  { href: '/services/bookkeeping', label: 'Services' },
  { href: '/pricing', label: 'Pricing' },
  { href: '/about', label: 'About' },
  { href: '/blog', label: 'Blog' },
  { href: '/contact', label: 'Contact' },
];

const env = getEnv();
const phoneDigits = env.COMPANY_PHONE || '0000000000';
const phoneDisplay = phoneDigits.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
const phoneHref = `tel:+1${phoneDigits}`;
const currentPath = Astro.url.pathname;
---
<header
  data-header
  class="sticky top-0 z-50 border-b border-brand-navy/10 bg-white/90 transition-all duration-300 supports-[backdrop-filter]:backdrop-blur backdrop-blur"
>
  <div class="container">
    <div class="flex items-center justify-between h-16 gap-3 transition-all duration-300 md:h-20 md:gap-6">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2" aria-label="Modern Ledger Home">
        <img src="/modern_ledger_256x256.png" width="32" height="32" alt="Modern Ledger logo" class="rounded-md shadow-sm" />
        <span class="font-display text-lg font-semibold text-brand-navy">Modern Ledger</span>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden items-center gap-1.5 md:flex">
        {navItems.map((item) => {
          const isActive = currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href));

          return (
            <a
              href={item.href}
              class:list={[
                'inline-flex h-10 items-center rounded-button px-3 text-sm font-medium transition-colors duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold',
                isActive
                  ? 'bg-brand-sky/80 text-brand-navy shadow-sm'
                  : 'text-neutral-500 hover:bg-brand-sky/70 hover:text-brand-navy'
              ]}
              aria-label={`Navigate to ${item.label}`}
              aria-current={isActive ? 'page' : undefined}
            >
              {item.label}
            </a>
          );
        })}
      </nav>

      <!-- CTA Button -->
      <div class="hidden items-center gap-4 md:flex">
        <a
          href={phoneHref}
          class="inline-flex h-10 items-center rounded-button px-3 text-sm font-medium text-brand-navy transition-colors duration-200 hover:bg-brand-sky/70 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold"
          aria-label="Call Modern Ledger"
        >
          <span class="mr-2 inline-flex h-2 w-2 rounded-full bg-emerald-500"></span>
          {phoneDisplay}
        </a>
        <a
          href="/contact"
          class="btn btn-primary h-11 px-6 text-sm shadow-soft"
          aria-label="Talk to a Modern Ledger expert"
        >
          Talk to a Texas-based expert
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-button"
        class="md:hidden rounded-full p-2 text-neutral-500 transition-colors duration-200 hover:bg-brand-sky/70 hover:text-brand-navy focus-visible:outline focus-visible:outline-2 focus-visible:outline-brand-gold"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden pb-4">
      <nav class="flex flex-col gap-1">
        {navItems.map((item) => {
          const isActive = currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href));

          return (
            <a
              href={item.href}
              class:list={[
                'inline-flex h-12 items-center rounded-lg px-4 text-base font-medium transition-colors duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold',
                isActive
                  ? 'bg-brand-sky/80 text-brand-navy shadow-sm'
                  : 'text-neutral-500 hover:bg-brand-sky/70 hover:text-brand-navy'
              ]}
              aria-label={`Navigate to ${item.label}`}
              aria-current={isActive ? 'page' : undefined}
            >
              {item.label}
            </a>
          );
        })}
        <div class="mt-4 border-t border-brand-navy/10 pt-4">
          <a
            href={phoneHref}
            class="inline-flex h-12 w-full items-center px-4 text-base font-medium text-neutral-500 transition-colors duration-200 hover:text-brand-navy"
            aria-label="Call Modern Ledger"
          >
            {phoneDisplay}
          </a>
          <a
            href="/contact"
            class="btn btn-primary mt-3 h-12 w-full"
            aria-label="Book a consultation"
          >
            Book Consult
          </a>
        </div>
      </nav>
    </div>
  </div>
</header>

<script is:inline>
  (() => {
    if (typeof window === 'undefined') return;

    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const header = document.querySelector('[data-header]');

    if (menuButton && mobileMenu) {
      menuButton.addEventListener('click', () => {
        const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
        menuButton.setAttribute('aria-expanded', String(!isExpanded));
        mobileMenu.classList.toggle('hidden');

        const icon = menuButton.querySelector('svg');
        if (icon) {
          icon.innerHTML = isExpanded
            ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>'
            : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>';
        }
      });
    }

    if (!header) return;

    const updateHeaderState = () => {
      const scrolled = window.scrollY > 24;
      header.classList.toggle('header-compact', scrolled);
      header.classList.toggle('shadow-soft', scrolled);
    };

    const scheduleUpdate = () => window.requestAnimationFrame(updateHeaderState);

    if ('requestIdleCallback' in window) {
      window.requestIdleCallback(updateHeaderState);
    } else {
      updateHeaderState();
    }

    window.addEventListener('scroll', scheduleUpdate, { passive: true });
  })();
</script>
