---
import { getEnv } from '../lib/env';

const navItems = [
  { href: '/', label: 'Home' },
  { 
    href: '/services', 
    label: 'Services',
    dropdown: [
      { href: '/services/bookkeeping', label: 'Bookkeeping Services' },
      { href: '/services/monthly-reconciliation', label: 'Monthly Reconciliation' },
      { href: '/services/clean-books', label: 'Clean Books Service' },
      { href: '/services/payroll-integration', label: 'Payroll Integration' },
      { href: '/services/tax-prep-support', label: 'Tax Preparation Support' },
    ]
  },
  { 
    href: '/resources', 
    label: 'Resources',
    dropdown: [
      { href: '/roi-calculator', label: 'ROI Calculator' },
      { href: '/blog/month-end-close-checklist', label: 'Month-End Close Checklist' },
      { href: '/blog/quickbooks-cleanup', label: 'QuickBooks Cleanup Guide' },
      { href: '/blog/cash-vs-accrual', label: 'Cash vs Accrual Accounting' },
      { href: '/resources', label: 'All Resources' },
    ]
  },
  { href: '/about', label: 'About' },
  { href: '/contact', label: 'Contact' },
];

const env = getEnv();
const phoneDigits = env.COMPANY_PHONE || '0000000000';
const phoneDisplay = phoneDigits.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
const phoneHref = `tel:+1${phoneDigits}`;
const currentPath = Astro.url.pathname;
---
<client:load>
<header
  data-header
  class="sticky top-0 z-50 border-b border-brand-navy/10 bg-white/90 transition-all duration-300 supports-[backdrop-filter]:backdrop-blur backdrop-blur"
>
  <div class="container">
    <div class="flex items-center justify-between h-12 gap-2 transition-all duration-300 md:h-14 md:gap-4">
      <!-- Logo -->
      <a href="/" class="flex items-center space-x-2" aria-label="Modern Ledger Home">
        <img src="/modern_ledger_256x256.png" width="32" height="32" alt="Modern Ledger logo" class="rounded-md shadow-sm" />
        <span class="font-display text-base font-semibold text-brand-navy">Modern Ledger</span>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden items-center gap-1.5 md:flex">
        {navItems.map((item) => {
          const isActive = currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href));
          const hasDropdown = item.dropdown && item.dropdown.length > 0;

          return (
            <div class="relative group">
              <a
                href={item.href}
                class:list={[
                  'inline-flex h-8 items-center rounded-button px-2 text-xs font-medium transition-colors duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold',
                  isActive
                    ? 'bg-brand-sky/80 text-brand-navy shadow-sm'
                    : 'text-neutral-500 hover:bg-brand-sky/70 hover:text-brand-navy',
                  hasDropdown ? 'flex items-center gap-1' : ''
                ]}
                aria-label={`Navigate to ${item.label}`}
                aria-current={isActive ? 'page' : undefined}
                aria-expanded={hasDropdown ? 'false' : undefined}
              >
                {item.label}
                {hasDropdown && (
                  <svg class="w-3 h-3 transition-transform duration-200 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                )}
              </a>
              
              {hasDropdown && (
                <div class="absolute top-full left-0 mt-1 w-56 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                  <div class="bg-white rounded-lg shadow-lg border border-brand-navy/10 py-2">
                    {item.dropdown.map((dropdownItem) => {
                      const isDropdownActive = currentPath === dropdownItem.href || (dropdownItem.href !== '/' && currentPath.startsWith(dropdownItem.href));
                      
                      return (
                        <a
                          href={dropdownItem.href}
                          class:list={[
                            'block px-4 py-2 text-sm transition-colors duration-200 hover:bg-brand-sky/70 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold',
                            isDropdownActive
                              ? 'bg-brand-sky/80 text-brand-navy font-medium'
                              : 'text-neutral-600 hover:text-brand-navy'
                          ]}
                          aria-label={`Navigate to ${dropdownItem.label}`}
                        >
                          {dropdownItem.label}
                        </a>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </nav>

      <!-- CTA Button -->
      <div class="hidden items-center gap-3 md:flex">
        <a
          href={phoneHref}
          class="inline-flex h-8 items-center rounded-button px-2 text-xs font-medium text-brand-navy transition-colors duration-200 hover:bg-brand-sky/70 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold"
          aria-label="Call Modern Ledger"
        >
          <span class="mr-1 inline-flex h-1.5 w-1.5 rounded-full bg-emerald-500"></span>
          {phoneDisplay}
        </a>
        <a
          href="/contact"
          class="btn btn-primary px-4 text-sm"
          aria-label="Talk to a Modern Ledger expert"
        >
          Talk to expert
        </a>
      </div>

      <button
        id="mobile-menu-button"
        data-testid="mobile-menu-toggle"
        class="md:hidden rounded-full p-1.5 text-neutral-500 transition-colors duration-200 hover:bg-brand-sky/70 hover:text-brand-navy focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>

    <!-- Mobile Navigation -->
    <div
      id="mobile-menu"
      data-testid="mobile-menu-panel"
      class="md:hidden hidden pb-4"
    >
      <nav class="flex flex-col gap-1">
        {navItems.map((item) => {
          const isActive = currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href));
          const hasDropdown = item.dropdown && item.dropdown.length > 0;

          return (
            <div>
              <a
                href={item.href}
                class:list={[
                  'inline-flex h-10 items-center rounded-lg px-3 text-sm font-medium transition-colors duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold',
                  isActive
                    ? 'bg-brand-sky/80 text-brand-navy shadow-sm'
                    : 'text-neutral-500 hover:bg-brand-sky/70 hover:text-brand-navy',
                  hasDropdown ? 'w-full justify-between' : ''
                ]}
                aria-label={`Navigate to ${item.label}`}
                aria-current={isActive ? 'page' : undefined}
                data-mobile-nav-item={hasDropdown ? 'has-dropdown' : 'simple'}
              >
                {item.label}
                {hasDropdown && (
                  <svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                )}
              </a>
              
              {hasDropdown && (
                <div class="ml-4 mt-1 space-y-1" data-mobile-dropdown>
                  {item.dropdown.map((dropdownItem) => {
                    const isDropdownActive = currentPath === dropdownItem.href || (dropdownItem.href !== '/' && currentPath.startsWith(dropdownItem.href));
                    
                    return (
                      <a
                        href={dropdownItem.href}
                        class:list={[
                          'block px-3 py-2 text-sm rounded-lg transition-colors duration-200 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-gold',
                          isDropdownActive
                            ? 'bg-brand-sky/80 text-brand-navy font-medium'
                            : 'text-neutral-400 hover:bg-brand-sky/70 hover:text-brand-navy'
                        ]}
                        aria-label={`Navigate to ${dropdownItem.label}`}
                      >
                        {dropdownItem.label}
                      </a>
                    );
                  })}
                </div>
              )}
            </div>
          );
        })}
        <div class="mt-3 border-t border-brand-navy/10 pt-3">
          <a
            href={phoneHref}
            class="inline-flex h-10 w-full items-center px-3 text-sm font-medium text-neutral-500 transition-colors duration-200 hover:text-brand-navy"
            aria-label="Call Modern Ledger"
          >
            {phoneDisplay}
          </a>
          <a
            href="/contact"
            class="btn btn-primary mt-2 h-10 w-full text-sm"
            aria-label="Book a consultation"
          >
            Book Consult
          </a>
        </div>
      </nav>
    </div>
  </div>
</header>

<script is:inline>
  (() => {
    if (typeof window === 'undefined') return;

    console.log('Header script starting...');

    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const header = document.querySelector('[data-header]');

    if (menuButton && mobileMenu) {
      menuButton.addEventListener('click', () => {
        const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
        menuButton.setAttribute('aria-expanded', String(!isExpanded));
        mobileMenu.classList.toggle('hidden');

        const icon = menuButton.querySelector('svg');
        if (icon) {
          icon.innerHTML = isExpanded
            ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>'
            : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>';
        }
      });

      // Handle mobile dropdown toggles
      const dropdownItems = mobileMenu.querySelectorAll('[data-mobile-nav-item="has-dropdown"]');
      dropdownItems.forEach(item => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          const dropdown = item.parentElement.querySelector('[data-mobile-dropdown]');
          const icon = item.querySelector('svg');
          
          if (dropdown && icon) {
            const isExpanded = dropdown.classList.contains('hidden');
            dropdown.classList.toggle('hidden');
            
            // Rotate icon
            icon.style.transform = isExpanded ? 'rotate(90deg)' : 'rotate(0deg)';
            
            // Update aria-expanded
            item.setAttribute('aria-expanded', String(isExpanded));
          }
        });
      });
    }

    // Add analytics tracking for phone and contact links
    const addAnalyticsTracking = () => {
      console.log('Adding analytics tracking, analytics available:', !!window.analytics);
      console.log('Analytics object:', window.analytics);
      
      // Track phone clicks
      const phoneLinks = document.querySelectorAll('a[href*="tel:"]');
      console.log('Found phone links:', phoneLinks.length);
      phoneLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          console.log('Phone link clicked');
          if (window.analytics && window.analytics.trackCallClick) {
            const href = link.getAttribute('href');
            const phoneMatch = href?.match(/tel:(\+?1?)?(\d+)/);
            if (phoneMatch) {
              console.log('Tracking call click:', phoneMatch[2]);
              window.analytics.trackCallClick(phoneMatch[2], window.location.pathname);
            }
          }
        });
      });

      // Track contact CTA clicks
      const contactLinks = document.querySelectorAll('a[href="/contact"], a[href*="contact"]');
      console.log('Found contact links:', contactLinks.length);
      contactLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          console.log('Contact link clicked, text:', link.textContent?.trim());
          if (window.analytics && window.analytics.trackCTAClick) {
            const text = link.textContent?.trim() || 'Contact';
            console.log('Tracking CTA click:', text);
            window.analytics.trackCTAClick(text, window.location.pathname);
          }
        });
      });
    };

    // Wait for analytics to be available
    const waitForAnalytics = () => {
      if (window.analytics) {
        console.log('Analytics found, adding tracking');
        addAnalyticsTracking();
      } else {
        console.log('Analytics not found, waiting...');
        setTimeout(waitForAnalytics, 100);
      }
    };

    waitForAnalytics();

    if (!header) return;

    const updateHeaderState = () => {
      const scrolled = window.scrollY > 24;
      header.classList.toggle('header-compact', scrolled);
      header.classList.toggle('shadow-soft', scrolled);
    };

    const scheduleUpdate = () => window.requestAnimationFrame(updateHeaderState);

    if ('requestIdleCallback' in window) {
      window.requestIdleCallback(updateHeaderState);
    } else {
      updateHeaderState();
    }

    window.addEventListener('scroll', scheduleUpdate, { passive: true });
  })();
</script>
