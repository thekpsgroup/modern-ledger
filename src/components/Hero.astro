---
import { getEnv } from '../lib/env';

// Hero props
export interface Props {
  title?: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: string;
  backgroundImage?: string;
}

const env = getEnv();
const rawPhone = env.COMPANY_PHONE ?? '469-534-3392';
const phoneDigits = rawPhone.replace(/[^0-9]/g, '') || '4695343392';
const phoneDisplay = phoneDigits.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3');
const phoneHref = `tel:+1${phoneDigits}`;

const {
  title = 'Bookkeeping That Pays For Itself.',
  subtitle = 'Modern Ledger catches the errors others miss and saves you thousands.',
  ctaText,
  ctaLink = '/contact',
  backgroundImage
} = Astro.props;

// A/B testing for hero headline and CTA
const heroHeadlineTest = {
  control: "Audit-ready bookkeeping in 30 days.",
  variant: "Bookkeeping that pays for itself in 30 days."
};

const ctaCopyTest = {
  control: "Schedule a Free Consultation",
  variant: "Get My Free Assessment"
};

// Use provided CTA text or default to control
const finalCTAText = ctaText || ctaCopyTest.control;

const stats = [
  { number: '51', suffix: 'hrs', label: 'Average time saved each month' },
  { number: '5.2', label: 'ROI inside the first 6 months' },
  { number: '24', suffix: 'hrs', label: 'Response time for new requests' },
  { number: '98%', label: 'Client retention across Texas' }
];

const heroIndustries = ['Construction crews', 'Medical practices', 'Professional services', 'Ecommerce brands'];

const heroLogos = [
  { name: 'QuickBooks Elite', logo: '/logos/quickbooks.svg', alt: 'QuickBooks Elite ProAdvisor badge' },
  { name: 'Gusto Partner', logo: '/logos/gusto.svg', alt: 'Gusto payroll partner badge' },
  { name: 'Texas Society of CPAs', logo: '/logos/tscpa.svg', alt: 'Texas Society of CPAs member badge' }
];
---

<style>
  .hero-solid-bg {
    background: #ffffff;
  }
  .dotted-pattern {
    background-image: radial-gradient(circle at 1px 1px, rgba(0, 43, 84, 0.08) 1px, transparent 0);
    background-size: 28px 28px;
  }
</style>

<section
  class="section relative overflow-hidden"
  class:list={[
    backgroundImage
      ? "bg-cover bg-center"
      : "hero-solid-bg"
  ]}
  style={backgroundImage ? `background-image: url(${backgroundImage})` : undefined}
>
  {!backgroundImage && (
    <div class="pointer-events-none absolute inset-0 opacity-30 dotted-pattern">
    </div>
  )}

  {backgroundImage && <div class="absolute inset-0 bg-brand-navy/60"></div>}

  <div class="container relative">
    <div class="grid gap-8">
      <div class="space-y-8 text-left">
        <div
          class="inline-flex items-center gap-2 rounded-full border border-brand-navy/10 bg-white/90 px-4 py-2 text-xs font-semibold uppercase tracking-[0.25em] text-brand-navy"
          class:list={[{ 'bg-white/20 text-white': Boolean(backgroundImage) }]}
        >
          Texas-based bookkeeping team  Est. 2010
        </div>

        <h1 class="text-3xl md:text-5xl font-bold text-gray-900 mb-6">
          {title}
        </h1>

        <p
          class="max-w-2xl text-lg text-neutral-600 md:text-xl"
          class:list={[{ 'text-white/85': Boolean(backgroundImage) }]}
        >
          {subtitle}
        </p>

        <div class="flex flex-col gap-4 sm:flex-row sm:items-center">
          <div class="inline-flex flex-col gap-3 sm:flex-row sm:items-center">
            <a href={ctaLink} class="btn btn-primary px-8 text-base" aria-label="Start the Modern Ledger intake">
              {finalCTAText}
              <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
              </svg>
            </a>
            <a
              href={phoneHref}
              class="btn btn-outline px-6 text-base"
              aria-label={`Call Modern Ledger at ${phoneDisplay}`}
            >
              Call {phoneDisplay}
            </a>
          </div>
          <a
            href="#testimonials"
            class="inline-flex items-center gap-3 text-sm font-semibold text-brand-navy underline-offset-4 transition hover:text-brand-navy/80"
          >
            <span class="flex h-10 w-10 items-center justify-center rounded-full bg-brand-gold/20 text-brand-gold">
              <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
              </svg>
            </span>
            See how Texas contractors save 51+ hours each month
          </a>
        </div>

        <div class="flex flex-wrap items-center gap-3 text-xs font-semibold uppercase tracking-[0.25em] text-neutral-500">
          {heroIndustries.map((industry) => (
            <span class="rounded-full border border-neutral-100 bg-white px-3 py-2 text-[0.65rem] text-neutral-500">
              {industry}
            </span>
          ))}
        </div>

        <div class="grid gap-5 text-sm text-neutral-500 sm:grid-cols-2 lg:grid-cols-4">
          {stats.map((stat) => (
            <div class="flex items-start gap-3 rounded-2xl border border-white/60 bg-white/85 p-4 shadow-sm" class:list={[{ 'bg-white/15 text-white': Boolean(backgroundImage) }]}>
              <div class="flex h-10 w-10 items-center justify-center rounded-full bg-brand-gold/20 text-brand-gold">
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <div>
                <div class="text-2xl font-semibold text-brand-navy" class:list={[{ 'text-white': Boolean(backgroundImage) }]}>
                  {stat.number}
                  {stat.suffix && <span class="text-base font-medium">{stat.suffix}</span>}
                </div>
                <p class="m-0 text-xs text-neutral-500" class:list={[{ 'text-white/70': Boolean(backgroundImage) }]}>
                  {stat.label}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <div class="mt-16 flex flex-wrap items-center gap-6 rounded-3xl border border-white/60 bg-white/90 px-6 py-4 shadow-soft" class:list={[{ 'bg-white/15 text-white': Boolean(backgroundImage) }]}>
      <span class="text-xs font-semibold uppercase tracking-[0.25em] text-neutral-500" class:list={[{ 'text-white/70': Boolean(backgroundImage) }]}>
        Trusted by teams running on
      </span>
      <div class="flex flex-wrap items-center gap-6">
        {heroLogos.map((logo) => (
          <img src={logo.logo} alt={logo.alt} class="h-8 w-auto opacity-70" loading="lazy" />
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  // A/B Testing for Hero component
  const AB_TESTS = {
    hero_headline: {
      control: "Audit-ready bookkeeping in 30 days.",
      variant: "Bookkeeping that pays for itself in 30 days."
    },
    cta_copy: {
      control: "Schedule a Free Consultation",
      variant: "Get My Free Assessment"
    }
  };

  // Get or assign user to test variant
  function getTestVariant(testName: string): 'control' | 'variant' {
    if (typeof localStorage === 'undefined') return 'control';

    const storageKey = `ab_test_${testName}`;
    const stored = localStorage.getItem(storageKey);

    if (stored === 'control' || stored === 'variant') {
      return stored;
    }

    // Simple random assignment (50/50)
    const variant = Math.random() < 0.5 ? 'control' : 'variant';
    localStorage.setItem(storageKey, variant);
    return variant;
  }

  // Apply A/B test variants to hero
  function applyABTests() {
    // Hero headline test
    const headlineVariant = getTestVariant('hero_headline');
    const headlineElement = document.querySelector('h1');

    if (headlineElement && headlineElement.textContent?.includes('Bookkeeping That Pays For Itself')) {
      headlineElement.textContent = AB_TESTS.hero_headline[headlineVariant];
    }

    // CTA copy test
    const ctaVariant = getTestVariant('cta_copy');
    const ctaButton = document.querySelector('.btn-primary');

    if (ctaButton && ctaButton.textContent?.includes('Schedule a Free Consultation')) {
      ctaButton.innerHTML = ctaButton.innerHTML.replace(
        'Schedule a Free Consultation',
        AB_TESTS.cta_copy[ctaVariant]
      );
    }
  }

  // Track CTA clicks for A/B testing
  function trackABCTA() {
    const ctaButtons = document.querySelectorAll('.btn-primary, a[href*="contact"]');

    ctaButtons.forEach(button => {
      button.addEventListener('click', () => {
        const headlineVariant = getTestVariant('hero_headline');
        const ctaVariant = getTestVariant('cta_copy');

        // Track in GA4
        if (typeof window !== 'undefined' && (window as any).gtag) {
          (window as any).gtag('event', 'ab_test_conversion', {
            test_name: 'hero_headline',
            test_variant: headlineVariant,
            conversion_type: 'cta_click',
            page_path: window.location.pathname
          });

          (window as any).gtag('event', 'ab_test_conversion', {
            test_name: 'cta_copy',
            test_variant: ctaVariant,
            conversion_type: 'cta_click',
            page_path: window.location.pathname
          });
        }
      });
    });
  }

  // Initialize A/B tests
  document.addEventListener('DOMContentLoaded', () => {
    applyABTests();
    trackABCTA();
  });
</script>
