---
// Testimonials data
import { TESTIMONIALS } from '../data/testimonials';

export interface Props {
  testimonials?: typeof TESTIMONIALS;
}

const { testimonials = TESTIMONIALS } = Astro.props;
---
---

<section class="section bg-white">
  <div class="container">
    <div class="stack-sm text-center">
      <span class="eyebrow mx-auto">Client Praise</span>
      <h2 class="text-balance">Trusted by Texas Business Owners</h2>
      <p class="text-body-lg mx-auto max-w-content-md text-neutral-500">
        Don’t just take our word for it. Here’s what our clients say about working with Modern Ledger.
      </p>
    </div>

    <div class="relative mt-14">
      <!-- Carousel Container -->
      <div id="testimonial-carousel" class="overflow-hidden">
        <div class="flex transition-transform duration-500 ease-in-out" id="testimonial-track">
          {testimonials.map((testimonial) => (
            <div class="w-full flex-shrink-0 px-2 md:w-1/2 lg:w-1/3 lg:px-3">
              <figure itemscope itemtype="https://schema.org/Review" class="surface h-full p-6 md:p-8">
                <meta itemprop="reviewRating" content={String(testimonial.rating)} />

                <!-- Rating -->
                <div class="mb-4 flex items-center">
                  {Array.from({ length: testimonial.rating }).map(() => (
                    <svg class="mr-1.5 h-5 w-5 text-brand-gold fill-current" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                    </svg>
                  ))}
                </div>

                <!-- Quote -->
                <blockquote itemprop="reviewBody" class="mb-6 text-body-md text-neutral-500">
                  "{testimonial.quote}"
                </blockquote>

                <!-- Author -->
                <div class="flex items-center">
                  <div>
                    <div class="text-base font-semibold text-brand-navy">
                      <span itemprop="author" itemscope itemtype="https://schema.org/Person">
                        <span itemprop="name">{testimonial.name}</span>
                      </span>
                    </div>
                    <div class="text-sm text-neutral-500">
                      {testimonial.role && `${testimonial.role}`}
                      {testimonial.company && ` • ${testimonial.company}`}
                    </div>
                    <div class="text-sm text-neutral-400">{testimonial.city}</div>
                  </div>
                </div>
              </figure>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Buttons -->
      <button
        id="prev-testimonial"
        class="absolute left-2 top-1/2 -translate-y-1/2 rounded-full bg-white p-3 text-neutral-400 shadow-soft transition-transform duration-200 hover:-translate-y-0.5 hover:text-brand-navy"
        aria-label="Previous testimonial"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        id="next-testimonial"
        class="absolute right-2 top-1/2 -translate-y-1/2 rounded-full bg-white p-3 text-neutral-400 shadow-soft transition-transform duration-200 hover:-translate-y-0.5 hover:text-brand-navy"
        aria-label="Next testimonial"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Dots Indicator -->
      <div class="mt-10 flex justify-center gap-2">
        {testimonials.map((_, index) => (
          <button
            class={`h-2 w-2 rounded-full transition-[width,background-color] duration-200 ${index === 0 ? 'w-8 bg-brand-navy' : 'bg-neutral-200'}`}
            data-slide={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<script define:vars={{ testimonials }}>
  let currentSlide = 0;
  const dots = document.querySelectorAll('[data-slide]');
  const totalSlides = testimonials.length;

  function updateCarousel() {
    const track = document.getElementById('testimonial-track');
    if (track) {
      track.style.transform = `translateX(-${currentSlide * 100}%)`;
    }

    // Update dots
    dots.forEach((dot, index) => {
      const isActive = index === currentSlide;
      dot.classList.toggle('bg-brand-navy', isActive);
      dot.classList.toggle('bg-neutral-200', !isActive);
      dot.classList.toggle('w-8', isActive);
      dot.classList.toggle('w-2', !isActive);
    });
  }

  function nextSlide() {
    currentSlide = (currentSlide + 1) % totalSlides;
    updateCarousel();
  }

  function prevSlide() {
    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    updateCarousel();
  }

  function goToSlide(slideIndex) {
    currentSlide = slideIndex;
    updateCarousel();
  }

  // Event listeners
  document.getElementById('next-testimonial')?.addEventListener('click', nextSlide);
  document.getElementById('prev-testimonial')?.addEventListener('click', prevSlide);

  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => goToSlide(index));
  });

  // Auto-play
  setInterval(nextSlide, 5000);
</script>