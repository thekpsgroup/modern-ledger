---
// Testimonials data
import { TESTIMONIALS } from '../data/testimonials';

export interface Props {
  testimonials?: typeof TESTIMONIALS;
}

const { testimonials = TESTIMONIALS } = Astro.props;
---
---

<section class="py-20 bg-white">
  <div class="container mx-auto px-4">
    <div class="text-center mb-16">
      <h2 class="font-display text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        Trusted by Texas Business Owners
      </h2>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        Don't just take our word for it. Here's what our clients say about working with Modern Ledger.
      </p>
    </div>

    <div class="relative">
      <!-- Carousel Container -->
      <div id="testimonial-carousel" class="overflow-hidden">
        <div class="flex transition-transform duration-500 ease-in-out" id="testimonial-track">
          {testimonials.map((testimonial, index) => (
            <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-4">
              <figure itemscope itemtype="https://schema.org/Review" class="bg-gray-50 rounded-xl p-8 h-full">
                <meta itemprop="reviewRating" content={String(testimonial.rating)} />

                <!-- Rating -->
                <div class="flex items-center mb-4">
                  {Array.from({ length: testimonial.rating }).map(() => (
                    <svg class="w-5 h-5 text-yellow-400 fill-current" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                    </svg>
                  ))}
                </div>

                <!-- Quote -->
                <blockquote itemprop="reviewBody" class="text-gray-700 mb-6 leading-relaxed">
                  "{testimonial.quote}"
                </blockquote>

                <!-- Author -->
                <div class="flex items-center">
                  <div>
                    <div class="font-semibold text-gray-900">
                      <span itemprop="author" itemscope itemtype="https://schema.org/Person">
                        <span itemprop="name">{testimonial.name}</span>
                      </span>
                    </div>
                    <div class="text-sm text-gray-600">
                      {testimonial.role && `${testimonial.role}`}
                      {testimonial.company && ` â€¢ ${testimonial.company}`}
                    </div>
                    <div class="text-sm text-gray-500">{testimonial.city}</div>
                  </div>
                </div>
              </figure>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Buttons -->
      <button
        id="prev-testimonial"
        class="absolute left-4 top-1/2 -translate-y-1/2 bg-white shadow-lg hover:shadow-xl rounded-full p-3 text-gray-600 hover:text-primary-600 transition-all duration-200"
        aria-label="Previous testimonial"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        id="next-testimonial"
        class="absolute right-4 top-1/2 -translate-y-1/2 bg-white shadow-lg hover:shadow-xl rounded-full p-3 text-gray-600 hover:text-primary-600 transition-all duration-200"
        aria-label="Next testimonial"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Dots Indicator -->
      <div class="flex justify-center mt-8 space-x-2">
        {testimonials.map((_, index) => (
          <button
            class={`w-3 h-3 rounded-full transition-all duration-200 ${index === 0 ? 'bg-primary-600' : 'bg-gray-300'}`}
            data-slide={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<script define:vars={{ testimonials }}>
  let currentSlide = 0;
  const testimonialElements = document.querySelectorAll('#testimonial-track > div');
  const dots = document.querySelectorAll('[data-slide]');
  const totalSlides = testimonials.length;

  function updateCarousel() {
    const track = document.getElementById('testimonial-track');
    if (track) {
      track.style.transform = `translateX(-${currentSlide * 100}%)`;
    }

    // Update dots
    dots.forEach((dot, index) => {
      dot.classList.toggle('bg-primary-600', index === currentSlide);
      dot.classList.toggle('bg-gray-300', index !== currentSlide);
    });
  }

  function nextSlide() {
    currentSlide = (currentSlide + 1) % totalSlides;
    updateCarousel();
  }

  function prevSlide() {
    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    updateCarousel();
  }

  function goToSlide(slideIndex) {
    currentSlide = slideIndex;
    updateCarousel();
  }

  // Event listeners
  document.getElementById('next-testimonial')?.addEventListener('click', nextSlide);
  document.getElementById('prev-testimonial')?.addEventListener('click', prevSlide);

  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => goToSlide(index));
  });

  // Auto-play
  setInterval(nextSlide, 5000);
</script>